{% extends "../layouts/base.twig" %}

{% block style %}
	<link rel="stylesheet" href="/assets/css/style.css"/>
	 <link href="https://unpkg.com/maplibre-gl@2.4.0/dist/maplibre-gl.css" rel="stylesheet">
    <script src="https://unpkg.com/maplibre-gl@2.4.0/dist/maplibre-gl.js"></script>
   <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.7/index.global.min.js'></script>
{% endblock %}

{% block title %}
	<title>Accueil</title>
{% endblock %}

{% block main %}
	<main>
		<section>
			<h2>Bienvenue
				{{ chef.raisonSociale }}</h2>
			<div>
				<p>Vous √™tes maintenant connect√©!</p>
			</div>
<div id="map" style="width: 100%; height: 300px;"></div>
			<h3>Ordinateurs</h3>
			<table>
				<thead>
					<tr>
						<th>Adresse Mac</th>
						<th>Employ√©</th>
						<th>Actions</th>
					</tr>
				</thead>
				<tbody>
					{% for pc in chef.pcs %}
						<tr>
							<td>{{ pc.adresseMac }}</td>
							<td>
								{% if pc.employe %}
									{{ pc.employe.firstName }}
									{{ pc.employe.lastName }} üî¥
								{% else %}
									Disponible üü¢
								{% endif %}
							</td>
							<td>
								<a href="/pc/edit/{{ pc.id }}">Modifier</a>
								<a href="/pc/delete/{{ pc.id }}">Supprimer</a>
							</td>
						</tr>
					{% endfor %}
				</tbody>
			</table>
			<h3>Employ√©s</h3>
			<table>
				<thead>
					<tr>
						<th>Pr√©nom</th>
						<th>Nom</th>
						<th>Actions</th>
					</tr>
				</thead>
				<tbody>
					{% for employe in chef.employes %}
						<tr>
							<td>{{ employe.firstName }}</td>
							<td>{{ employe.lastName }}</td>
							<td>
								<a href="/employe/edit/{{ employe.id }}">Modifier</a>
								<a href="/employe/delete/{{ employe.id }}">Supprimer</a>
							</td>
						</tr>
					{% endfor %}
				</tbody>
			</table>
			<div id="calendar" style="width: 100%; height: 100px; margin-top: 40px;"></div>
			<div id="eventModal" class="modal" style="display: none;">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h3 id="modalTitle">Ajouter/Modifier un √©v√©nement</h3>
        <form id="eventForm">
            <label for="eventTitle">Titre de l'√©v√©nement :</label>
            <input type="text" id="eventTitle" name="eventTitle" required>
            <input type="hidden" id="eventId">
            <button type="submit">Enregistrer</button>
            <button type="button" id="deleteEvent" style="display: none;">Supprimer</button>
        </form>
    </div>
</div>
		</section>
	</main>
<script>
    const pcs = {{ chef.pcs | json_encode | raw }};

  document.addEventListener('DOMContentLoaded', async function () {
        const map = new maplibregl.Map({
            container: 'map', // ID du conteneur
            style: 'https://basemaps.cartocdn.com/gl/positron-gl-style/style.json', // Style de la carte
            center: [5.36978, 43.296482], // Coordonn√©es initiales (Marseille)
            zoom: 10 // Niveau de zoom initial
        });

        // Fonction pour g√©n√©rer des coordonn√©es al√©atoires dans Marseille
        function generateRandomCoordinates() {
            const latitude = (Math.random() * (43.35 - 43.25) + 43.25).toFixed(6);
            const longitude = (Math.random() * (5.45 - 5.35) + 5.35).toFixed(6);
            return [parseFloat(longitude), parseFloat(latitude)];
        }

        // R√©cup√®re les positions sauvegard√©es dans localStorage
        const savedPositions = JSON.parse(localStorage.getItem('pcPositions')) || {};

        // Ajout des marqueurs uniquement pour les ordinateurs occup√©s
        pcs.forEach(pc => {
            if (pc.employe) { // V√©rifie si l'ordinateur est occup√©
                let coordinates;

                // Si les coordonn√©es sont d√©j√† sauvegard√©es dans localStorage, utilisez-les
                if (savedPositions[pc.id]) {
                    coordinates = savedPositions[pc.id];
                } else if (pc.longitude && pc.latitude) {
                    // Si les coordonn√©es existent d√©j√† dans les donn√©es, utilisez-les
                    coordinates = [pc.longitude, pc.latitude];
                } else {
                    // Sinon, g√©n√©rez des coordonn√©es al√©atoires
                    coordinates = generateRandomCoordinates();
                    // Sauvegardez les coordonn√©es dans localStorage
                    savedPositions[pc.id] = coordinates;
                }

                // Ajoutez un marqueur pour cet ordinateur
                new maplibregl.Marker()
                    .setLngLat(coordinates)
                    .setPopup(new maplibregl.Popup().setHTML(`
                        <strong>Adresse MAC:</strong> ${pc.adresseMac}<br>
                        <strong>Employ√©:</strong> ${pc.employe.firstName} ${pc.employe.lastName}
                    `)) // Popup avec l'adresse MAC et l'employ√©
                    .addTo(map);
            }
        });

        // Sauvegarde les positions mises √† jour dans localStorage
        localStorage.setItem('pcPositions', JSON.stringify(savedPositions));
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var calendarEl = document.getElementById('calendar');
        var modal = document.getElementById('eventModal');
        var closeModalButton = document.querySelector('.close'); // Bouton de fermeture
        var eventForm = document.getElementById('eventForm');
        var eventTitleInput = document.getElementById('eventTitle');
        var eventIdInput = document.getElementById('eventId');
        var deleteEventButton = document.getElementById('deleteEvent');
        var selectedEvent = null;

        // Fonction pour sauvegarder les √©v√©nements dans localStorage
        function saveEventsToLocalStorage(events) {
            localStorage.setItem('calendarEvents', JSON.stringify(events));
        }

        // Fonction pour charger les √©v√©nements depuis localStorage
        function loadEventsFromLocalStorage() {
            const events = localStorage.getItem('calendarEvents');
            return events ? JSON.parse(events) : [];
        }

        if (calendarEl) {
            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                locale: 'fr',
                editable: true, // Permet de d√©placer les √©v√©nements
                selectable: true,
                dayHeaderFormat: { weekday: 'long' },
                events: loadEventsFromLocalStorage(), // Charger les √©v√©nements depuis localStorage
                dateClick: function (info) {
                    openModal();
                    eventTitleInput.value = '';
                    eventIdInput.value = '';
                    deleteEventButton.style.display = 'none';
                    selectedEvent = { start: info.dateStr };
                },
                eventClick: function (info) {
                    openModal();
                    eventTitleInput.value = info.event.title;
                    eventIdInput.value = info.event.id;
                    deleteEventButton.style.display = 'inline-block';
                    selectedEvent = info.event;
                },
                eventDrop: function (info) {
                    // Sauvegarder les √©v√©nements apr√®s un d√©placement
                    const events = calendar.getEvents().map(event => ({
                        id: event.id,
                        title: event.title,
                        start: event.startStr,
                        end: event.endStr,
                        allDay: event.allDay
                    }));
                    saveEventsToLocalStorage(events);
                }
            });

            calendar.render();

            // Gestion de la soumission du formulaire
            eventForm.addEventListener('submit', function (e) {
                e.preventDefault();
                const title = eventTitleInput.value;

                if (selectedEvent.id) {
                    // Modifier un √©v√©nement existant
                    selectedEvent.setProp('title', title);
                } else {
                    // Ajouter un nouvel √©v√©nement
                    const newEvent = {
                        id: String(Date.now()), // G√©n√®re un ID unique bas√© sur le timestamp
                        title: title,
                        start: selectedEvent.start,
                        allDay: true
                    };
                    calendar.addEvent(newEvent);
                }

                // Sauvegarder les √©v√©nements dans localStorage
                const events = calendar.getEvents().map(event => ({
                    id: event.id,
                    title: event.title,
                    start: event.startStr,
                    end: event.endStr,
                    allDay: event.allDay
                }));
                saveEventsToLocalStorage(events);

                closeModal();
            });

            // Gestion de la suppression d'un √©v√©nement
            deleteEventButton.addEventListener('click', function () {
                if (selectedEvent) {
                    selectedEvent.remove();

                    // Sauvegarder les √©v√©nements dans localStorage
                    const events = calendar.getEvents().map(event => ({
                        id: event.id,
                        title: event.title,
                        start: event.startStr,
                        end: event.endStr,
                        allDay: event.allDay
                    }));
                    saveEventsToLocalStorage(events);
                }
                closeModal();
            });

            // Fermer la modale en cliquant sur le bouton "X"
            closeModalButton.addEventListener('click', function () {
                closeModal();
            });

            // Fermer la modale en cliquant en dehors de la modale
            window.addEventListener('click', function (event) {
                if (event.target == modal) {
                    closeModal();
                }
            });

            function openModal() {
                modal.style.display = 'block';
            }

            function closeModal() {
                modal.style.display = 'none';
            }
        }
    });
</script>
{% endblock %}
